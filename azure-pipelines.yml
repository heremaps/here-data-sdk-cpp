trigger:
- master
pr:
- master
schedules:
- cron: "0 0 * * *"
  displayName: Nightly build
  branches:
    include:
    - master

variables:
  BUILD_TYPE: "RelWithDebInfo"

jobs:
- job: Commit_checker
  pool:
    vmImage: 'ubuntu-18.04'
  condition: eq(variables['Build.Reason'], 'PullRequest')
  steps:
    - bash: scripts/misc/commit_checker.sh
      displayName: 'Commit checker script'
- job: Windows_build
  pool:
    vmImage: 'windows-latest'
  steps:
  - bash: curl https://raw.githubusercontent.com/mock-server/mockserver/master/mockserver-core/src/main/resources/org/mockserver/socket/CertificateAuthorityCertificate.pem --output mock-server-cert.cer
    displayName: 'Get cert'
  - powershell: Import-Certificate -FilePath mock-server-cert.cer -CertStoreLocation Cert:\LocalMachine\Root
    displayName: 'Import cert'
  - powershell: dir Cert:\CurrentUser\Root
    displayName: 'Check cert CurrentUser'
  - powershell: dir Cert:\LocalMachine\Root
    displayName: 'Check cert LocalMachine'
  - bash: whoami && scripts/windows/build.sh
    displayName: 'Windows Build'
  - bash: sudo scripts/windows/test_fv_network.sh
    displayName: 'Windows FV Network test'
    condition: in(variables['Build.Reason'], 'Schedule', 'Manual')
- job: MacOS_build
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - bash: scripts/macos/psv/azure_macos_build_psv.sh
    displayName: 'MacOS Build'

- job: iOS_build
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - bash: scripts/ios/azure_ios_build_psv.sh
    displayName: 'iOS Build'

- job: Android_build
  pool:
    vmImage: 'ubuntu-18.04'
  variables:
    ANDROID_NDK_HOME: $(ANDROID_HOME)/ndk-bundle
    LD_PRELOAD: "/lib/x86_64-linux-gnu/libSegFault.so"
    SEGFAULT_SIGNALS: "all"
  steps:
    - bash: ls -la $(ANDROID_NDK_HOME)/build/cmake/android.toolchain.cmake
      displayName: 'Verification of cmake script'
    - bash: ANDROID_NDK_HOME=$(ANDROID_NDK_HOME) && scripts/android/build.sh
      displayName: 'Android build and Examples'

- job: Android_Emulator
  pool:
    vmImage: 'macOS-10.14'
  condition: eq(variables['Build.Reason'], 'Manual')
  variables:
    ANDROID_NDK_HOME: $(ANDROID_HOME)/ndk-bundle
  steps:
    - bash: ls -la $(ANDROID_NDK_HOME)/build/cmake/android.toolchain.cmake
      displayName: 'Verification of cmake script'
    - bash: ANDROID_NDK_HOME=$(ANDROID_NDK_HOME) && scripts/android/build-test-emulator.sh
      displayName: 'Android Test'

- job: Linux_build_clang
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    LD_PRELOAD: "/lib/x86_64-linux-gnu/libSegFault.so"
    SEGFAULT_SIGNALS: "all"
    CC: clang-7
    CXX: clang++-7
    CCACHE_DIR: $(Pipeline.Workspace)/ccache
  steps:
  - bash: |
        sudo apt-get update -y
        sudo apt-get install clang-7 ccache libcurl4-openssl-dev -y --no-install-recommends --fix-missing
        echo "##vso[task.prependpath]/usr/lib/ccache"
        echo week_$(date +%W) > week_number.txt
    displayName: 'Install dependencies'
  - task: Cache@2
    inputs:
        key: 'ccache | "$(Agent.OS)" | ./week_number.txt '
        path: $(CCACHE_DIR)
    displayName: ccache
  - bash: scripts/linux/psv/build_psv.sh
    displayName: 'Linux Clang Build'
