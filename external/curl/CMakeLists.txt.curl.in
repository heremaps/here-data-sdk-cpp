# Copyright (C) 2022 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

cmake_minimum_required(VERSION 3.15)

project(curl-download NONE)

include(ExternalProject)

find_package(zlib QUIET)
if(NOT TARGET zlib AND NOT ZLIB_FOUND)
    ExternalProject_Add(zlib
        SOURCE_DIR ${ZLIB_SOURCE_DIR}
        URL             @OLP_SDK_CPP_ZLIB_URL@
        URL_HASH        @OLP_SDK_CPP_ZLIB_HASH@
        INSTALL_DIR       "@EXTERNAL_BINARY_INSTALL_DIR@"
        UPDATE_COMMAND ""
        PATCH_COMMAND ""
        CMAKE_ARGS
        @COMMON_PLATFORM_FLAGS@
        -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        )
endif()

#find_package(OpenSSL QUIET)
#message(FATAL_ERROR OPENSSL_FOUND=${OPENSSL_FOUND} " " OpenSSL=${OpenSSL})

if(NOT TARGET OpenSSL AND NOT OPENSSL_FOUND)
    ExternalProject_Add(OpenSSL
        SOURCE_DIR ${OPENSSL_SOURCE_DIR}
        GIT_REPOSITORY @OLP_SDK_CPP_OPENSSL_URL@
        GIT_TAG        @OLP_SDK_CPP_OPENSSL_TAG@
        GIT_SHALLOW    1
        INSTALL_DIR    "@EXTERNAL_BINARY_INSTALL_DIR@"
        UPDATE_COMMAND ""
        # Add our own cmake files as OpenSSL doesn't provide any.
        PATCH_COMMAND "${CMAKE_COMMAND}" -E copy_directory "${CMAKE_CURRENT_SOURCE_DIR}/openssl" "${CMAKE_CURRENT_BINARY_DIR}/download/OpenSSL-prefix/src/OpenSSL"
              # Make openssl 1.1.1 to us MD5 hash instead of SHA-1 for certificate file names.
              COMMAND sed -i "s/h = X509_NAME_hash(name)/h = X509_NAME_hash_old(name)/g" ${CMAKE_CURRENT_BINARY_DIR}/download/OpenSSL-prefix/src/OpenSSL/crypto/x509/by_dir.c
        CMAKE_ARGS
        @COMMON_PLATFORM_FLAGS@
        -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        )
endif()

ExternalProject_Add(CURL
    GIT_REPOSITORY  @OLP_SDK_CPP_CURL_URL@
    GIT_TAG         @OLP_SDK_CPP_CURL_TAG@
    GIT_SHALLOW     1
    INSTALL_DIR    "@EXTERNAL_BINARY_INSTALL_DIR@"

    UPDATE_COMMAND ""
    # Curl use try_compile() for internal checks, 'LINK_LIBRARIES' will make it work with cmake import/export targets.
    PATCH_COMMAND sed -i "/CMake.CurlTests.c/a LINK_LIBRARIES crypto ssl" "${CMAKE_CURRENT_BINARY_DIR}/download/CURL-prefix/src/CURL/CMake/Macros.cmake"
    CMAKE_ARGS
    @COMMON_PLATFORM_FLAGS@
    -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
    -C ${CMAKE_CURRENT_BINARY_DIR}/config/curl/CurlAndroidCrossCompile.cmake

    -DCMAKE_FIND_ROOT_PATH=${EXTERNAL_BINARY_INSTALL_DIR}
    -DCMAKE_SYSTEM_PREFIX_PATH=<INSTALL_DIR>
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}

    -DCMAKE_FIND_PACKAGE_PREFER_CONFIG=TRUE
    -DBUILD_CURL_EXE=OFF
    -DBUILD_CURL_TESTS=OFF
    -DCURL_ZLIB=ON
    )

ExternalProject_Add_StepDependencies(CURL build zlib OpenSSL)
