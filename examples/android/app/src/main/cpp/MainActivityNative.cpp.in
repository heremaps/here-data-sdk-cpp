/*
 * Copyright (C) 2019 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

#include <jni.h>
#include <string>
#include <vector>
#include <memory>

#include <olp/core/platform/Context.h>

#include "ReadExample.h"
#include "WriteExample.h"

namespace {
std::unique_ptr<olp::context::Context::Scope> gNetworkScope;
JavaVM* gJavaVM = nullptr;
const AccessKey access_key{
    "", ""};  // Your access key ID and access key secret.
const std::string catalog;     // The HRN of the catalog to which you want to publish data.
const std::string layer_id;    // The ID of the layer inside the catalog to which you
                               // want to publish data.

}  // namespace

extern "C" JNIEXPORT jstring JNICALL
Java_com_here_android_olp_@OLP_SDK_EXAMPLE_PACKAGE_JNI_NAME@_MainActivity_runExampleNative(
    JNIEnv* env, jobject /* this */) {
  const auto result = RunExampleRead(access_key, catalog) | RunExampleWrite(access_key, catalog, layer_id) ;

  return env->NewStringUTF(result == 0 ? "@OLP_SDK_SUCCESSFUL_EXAMPLE_EXECUTION_STRING@"
                                       : "@OLP_SDK_FAILING_EXAMPLE_EXECUTION_STRING@");
}

extern "C" JNIEXPORT void JNICALL
Java_com_here_android_olp_@OLP_SDK_EXAMPLE_PACKAGE_JNI_NAME@_MainActivity_setupContextNative(
    JNIEnv* jEnv, jobject jobj, jobject jappContext) {
  auto scope = new olp::context::Context::Scope(gJavaVM, jappContext);
  gNetworkScope = std::unique_ptr<olp::context::Context::Scope>(scope);
}

extern "C" JNIEXPORT void JNICALL
Java_com_here_android_olp_@OLP_SDK_EXAMPLE_PACKAGE_JNI_NAME@_MainActivity_tearDownContextNative(
    JNIEnv* /*env*/, jobject /*obj*/) {
  gNetworkScope.reset();
}

extern "C" JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* javaVM,
                                             void* /*reserved*/) {
  gJavaVM = javaVM;

  return JNI_VERSION_1_6;
}
